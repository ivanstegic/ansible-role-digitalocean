---
- name: Create a temp directory to store files needed by the run
  tempfile:
    state: directory
    prefix: "ansible-{{ role_name }}"
  register: _run_temp_dir
  notify:
    - delete temp items
- name: Get a list of clusters
  uri:
    url: "https://api.digitalocean.com/v2/kubernetes/clusters"
    method: GET
    headers:
      Authorization: "Bearer {{ digitalocean_api_token }}"
  register: _cluster_list
- name: Get the cluster IDs given the cluster names
  set_fact:
    cluster:
      id: "{{ _cluster_list.json | json_query(_cluster_query) | first | default('') }}"
      name: "{{ item.name }}"
  vars:
    _cluster_query: "kubernetes_clusters[?name=='{{ item.name }}'].id"
  loop: "{{ digitalocean_clusters | default([]) }}"
  register: _cluster_ids_raw
- name: Normalize the cluster IDs into a list
  set_fact:
    _cluster_ids: "{{ _cluster_ids_raw.results | map(attribute='ansible_facts.cluster') | list }}"
- name: Create a temp directory for each cluster
  file:
    path: "{{ _run_temp_dir.path }}/{{ item.name }}"
    state: directory
    mode: "u=rwx,g=,o="
  loop: "{{ _cluster_ids | default([]) }}"
- name: Get the kubeconfig per cluster
  uri:
    url: "https://api.digitalocean.com/v2/kubernetes/clusters/{{ item.id | string }}/kubeconfig"
    method: GET
    headers:
      Authorization: "Bearer {{ digitalocean_api_token }}"
    return_content: yes
    status_code:
      - 200
  register: _cluster_configs
  loop: "{{ _cluster_ids | default([]) }}"
- name: Write the kubeconfig files
  copy:
    content: "{{ item.content }}"
    dest: "{{ _run_temp_dir.path }}/{{ item.item.name }}/kubectl.yaml"
    mode: "u=rwx,g=,o="
  loop: "{{ _cluster_configs.results | default([]) }}"
  no_log: true
